/*========================================================================*\

   Copyright Lotus Development Corp. 1995 - 1999


   The enclosed code created by Lotus Development Corporation, is
   sample code. This sample code is provided to you solely for the
   purpose of assisting you in the development of your LotusScript
   Extension (LSX) applications.

   File: iCVMRegistry.tab

   Description:
      Class registration tables for CVMRegistry class

\*========================================================================*/

static LSUINT CVMRegistry_methodnameids[] =
{
   CCHRYSALIS_CVMREGISTRYMETHOD_ADDKEY,
   CCHRYSALIS_CVMREGISTRYMETHOD_DELETEKEY,
   CCHRYSALIS_CVMREGISTRYMETHOD_GETKEY,
   CCHRYSALIS_CVMREGISTRYMETHOD_LISTSECTION,
   CCHRYSALIS_CVMREGISTRYMETHOD_NEW,
   CCHRYSALIS_CVMREGISTRYMETHOD_SELFREGISTER,
};

#define  N_CVMREGISTRY_METHODS  ((sizeof(CVMRegistry_methodnameids)) / (sizeof(LSUINT)))


#define  N_CVMREGISTRY_PROPS  0


#define  N_CVMREGISTRY_EVENTS  0


/*
** NOTE: all the signature arrays are n_args + 1,
**       where n_args includes "this", and the extra
**       slot (which comes first) is the return type.
*/

static LSDATATYPE CVMREGISTRYAddKeyArgs[N_CVMREGISTRY_ADDKEY_ARGS +1] =
{
   LSX_BYVAL_SHORT,
   LSX_THIS_PTR,
   LSX_BYREF_STRING,
   LSX_BYREF_STRING,
   LSX_BYVAL_SHORT|LSI_DT_OPTIONAL,
};

static CHARTYPE *  CVMREGISTRYAddKeyArgNames[N_CVMREGISTRY_ADDKEY_ARGS - 1] =
{
   LIT_STR("KeyName"),
   LIT_STR("KeyValue"),
   LIT_STR("KeySection")
};
static LSDATATYPE CVMREGISTRYDeleteKeyArgs[N_CVMREGISTRY_DELETEKEY_ARGS +1] =
{
   LSX_BYVAL_SHORT,
   LSX_THIS_PTR,
   LSX_BYREF_STRING,
   LSX_BYVAL_SHORT|LSI_DT_OPTIONAL,
};

static CHARTYPE *  CVMREGISTRYDeleteKeyArgNames[N_CVMREGISTRY_DELETEKEY_ARGS - 1] =
{
   LIT_STR("KeyName"),
   LIT_STR("KeySection")
};
static LSDATATYPE CVMREGISTRYGetKeyArgs[N_CVMREGISTRY_GETKEY_ARGS +1] =
{
   LSX_BYVAL_STRING,
   LSX_THIS_PTR,
   LSX_BYREF_STRING,
   LSX_BYVAL_SHORT|LSI_DT_OPTIONAL,
};

static CHARTYPE *  CVMREGISTRYGetKeyArgNames[N_CVMREGISTRY_GETKEY_ARGS - 1] =
{
   LIT_STR("KeyName"),
   LIT_STR("KeySection")
};
static LSDATATYPE CVMREGISTRYListSectionArgs[N_CVMREGISTRY_LISTSECTION_ARGS +1] =
{
   LSX_BYVAL_STRING,
   LSX_THIS_PTR,
   LSX_BYVAL_SHORT|LSI_DT_OPTIONAL,
};

static CHARTYPE *  CVMREGISTRYListSectionArgNames[N_CVMREGISTRY_LISTSECTION_ARGS - 1] =
{
   LIT_STR("KeySection")
};
static LSDATATYPE CVMREGISTRYNewArgs[N_CVMREGISTRY_NEW_ARGS +1] =
{
   LSX_CLASS_RET(CCHRYSALIS_CVMREGISTRY_ID),
   LSX_THIS_PTR,

};


static LSDATATYPE CVMREGISTRYSelfRegisterArgs[N_CVMREGISTRY_SELFREGISTER_ARGS +1] =
{
   LSX_BYVAL_SHORT,
   LSX_THIS_PTR,
   LSX_BYREF_STRING,
   LSX_BYREF_STRING,
};

static CHARTYPE *  CVMREGISTRYSelfRegisterArgNames[N_CVMREGISTRY_SELFREGISTER_ARGS - 1] =
{
   LIT_STR("KeyName"),
   LIT_STR("KeyValue")
};




static LSADTMETHODDESCR CVMRegistry_gmethods[N_CVMREGISTRY_METHODS] =
{
   {(LSPLTSTR)LSNULL, CCHRYSALIS_CVMREGISTRYMETHOD_ADDKEY, CVMREGISTRYAddKeyArgs, (LSREGNAME *) CVMREGISTRYAddKeyArgNames, N_CVMREGISTRY_ADDKEY_ARGS, LSX_REGULAR_PROC, LSI_NO_HELPID},
   {(LSPLTSTR)LSNULL, CCHRYSALIS_CVMREGISTRYMETHOD_DELETEKEY, CVMREGISTRYDeleteKeyArgs, (LSREGNAME *) CVMREGISTRYDeleteKeyArgNames, N_CVMREGISTRY_DELETEKEY_ARGS, LSX_REGULAR_PROC, LSI_NO_HELPID},
   {(LSPLTSTR)LSNULL, CCHRYSALIS_CVMREGISTRYMETHOD_GETKEY, CVMREGISTRYGetKeyArgs, (LSREGNAME *) CVMREGISTRYGetKeyArgNames, N_CVMREGISTRY_GETKEY_ARGS, LSX_REGULAR_PROC, LSI_NO_HELPID},
   {(LSPLTSTR)LSNULL, CCHRYSALIS_CVMREGISTRYMETHOD_LISTSECTION, CVMREGISTRYListSectionArgs, (LSREGNAME *) CVMREGISTRYListSectionArgNames, N_CVMREGISTRY_LISTSECTION_ARGS, LSX_REGULAR_PROC, LSI_NO_HELPID},
   {(LSPLTSTR)LSNULL, CCHRYSALIS_CVMREGISTRYMETHOD_NEW, CVMREGISTRYNewArgs, (LSREGNAME *) LSNULL, N_CVMREGISTRY_NEW_ARGS, LSX_NEW_PROC, LSI_NO_HELPID},
   {(LSPLTSTR)LSNULL, CCHRYSALIS_CVMREGISTRYMETHOD_SELFREGISTER, CVMREGISTRYSelfRegisterArgs, (LSREGNAME *) CVMREGISTRYSelfRegisterArgNames, N_CVMREGISTRY_SELFREGISTER_ARGS, LSX_REGULAR_PROC, LSI_NO_HELPID},
};





